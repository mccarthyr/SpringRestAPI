<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">


 	<!-- <password-encoder hash="bcrypt" />  provides default settings -->
 	<authentication-manager>
 		<authentication-provider user-service-ref="userDetailsService" >
 			<password-encoder ref="passwordEncoder" />
 		</authentication-provider>
 	</authentication-manager>



 	<!-- Pass a 'strength' parameter to the BCryptPasswordEncoder -->
 	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
 		<beans:constructor-arg name="strength" value="11" />
 	</beans:bean>



 	<beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl" >
 		<beans:property name="dataSource" ref="dataSource" />
  </beans:bean>



	<http use-expressions="true"  entry-point-ref="restAuthenticationEntryPoint">

		<!-- <access-denied-handler error-page="/athleteaccountv2/access-denied" /> -->
		<access-denied-handler ref="customAccessDeniedHandler" />

		<!--
		<intercept-url pattern="/athleteaccountv2/login" access="permitAll" />
		<intercept-url pattern="/athleteaccountv2/registration" access="permitAll" />
		<intercept-url pattern="/athleteaccountv2/register/user" access="permitAll" />
		-->

		<intercept-url pattern="/api/*" access="hasAnyRole('ROLE_ATHLETE', 'ROLE_ADMIN')" />
		<!-- *** NOTE *** OR COULD TRY IT THIS WAY
		<intercept-url pattern="/api/*" access="isAuthenticated()" />
		-->

		<csrf disabled="true" />

		<!--  login-page="/athleteaccountv2/login" -->
		<form-login  
			authentication-failure-handler-ref="authFailureHandler" 

			authentication-success-handler-ref="authSuccessHandler" />

		<!-- <logout logout-url="/athleteaccountv2/logout" />  -->

		<!--
		<headers>
			<cache-control />
			<xss-protection />
		</headers>
	-->
	</http>


	<beans:bean id = "restAuthenticationEntryPoint" class = "com.fireduptech.spring.rest.security.MyRestAuthenticationEntryPoint" />

	<beans:bean id = "authFailureHandler" class = "org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />
	
	<beans:bean id = "authSuccessHandler" class = "com.fireduptech.spring.rest.security.MyAuthenticationSuccessHandler" />

	<beans:bean id = "customAccessDeniedHandler" class = "com.fireduptech.spring.rest.security.MyCustomAccessDeniedHandler" />


	<global-method-security pre-post-annotations="enabled" >
		<expression-handler ref="expressionHandler" />
	</global-method-security>


	<beans:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler" >
		<beans:property name="permissionEvaluator" ref="permissionEvaluator" />
		<beans:property name="permissionCacheOptimizer" >
			<beans:bean class="org.springframework.security.acls.AclPermissionCacheOptimizer" >
				<beans:constructor-arg ref="aclService" />
			</beans:bean>
		</beans:property>
	</beans:bean>


	<beans:bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator" >
		<beans:constructor-arg ref="aclService" />
	</beans:bean>



	<beans:bean id="aclCache" class="org.springframework.security.acls.domain.EhCacheBasedAclCache" >
		<beans:constructor-arg>
 

			<beans:bean class="org.springframework.cache.ehcache.EhCacheFactoryBean" >

				<beans:property name="cacheManager">
					<beans:bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
				</beans:property>

				<beans:property name="cacheName" value="aclCache" />

			</beans:bean>

		</beans:constructor-arg>
		<beans:constructor-arg ref="aclAuthorizationStrategy" />
		<beans:constructor-arg ref="permissionGrantingStrategy" />	
	</beans:bean>


	<beans:bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy" >
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="aclCache" />
		<beans:constructor-arg ref="aclAuthorizationStrategy" />
		<beans:constructor-arg ref="permissionGrantingStrategy" />
	</beans:bean>


	<beans:bean id="aclAuthorizationStrategy" class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl" >
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.core.authority.SimpleGrantedAuthority" >
				<beans:constructor-arg value="ROLE_ADMIN" />
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="permissionGrantingStrategy" class="org.springframework.security.acls.domain.DefaultPermissionGrantingStrategy" >
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
		</beans:constructor-arg>
	</beans:bean>

	<!--
		As ACL permissions are stored in database tables, the application uses Spring's
		JsbcMutableAclService to perform CRUD operations on ACLs in the tables.
	-->	
	<beans:bean id="aclService" class="org.springframework.security.acls.jdbc.JdbcMutableAclService" >
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="lookupStrategy" />
		<beans:constructor-arg ref="aclCache" />
		<beans:property name="classIdentityQuery" value="SELECT @@IDENTITY" />
		<beans:property name="sidIdentityQuery" value="SELECT @@IDENTITY" />
	</beans:bean>



</beans:beans>

